{"version":3,"sources":["GuessedWords.js","Congrats.js","actions/index.js","Input.js","helpers/index.js","App.js","serviceWorker.js","reducers/index.js","reducers/successReducer.js","reducers/guessedWordsReducer.js","reducers/secretWordReducer.js","configureStore.js","index.js"],"names":["GuessedWords","props","contents","guessedWords","length","react_default","a","createElement","data-test","guessedWordsRows","map","word","index","key","guessedWord","letterMatchCount","className","Congrats","success","actionTypes","Input","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inputBox","React","createRef","submitGuessedWord","bind","assertThisInitialized","inherits","createClass","value","event","preventDefault","current","guessWord","ref","id","type","placeholder","onClick","Component","connect","_ref","dispatch","getState","secretWord","secretLetterSet","Set","split","guessedLetterSet","toConsumableArray","filter","letter","has","getLetterMatchCount","payload","App","apply","arguments","getSecretWord","src_Congrats","src_Input","src_GuessedWords","state","axios","get","then","response","data","Boolean","window","location","hostname","match","combineReducers","undefined","action","concat","middlewares","ReduxThunk","createStoreWithMiddleware","applyMiddleware","createStore","rootReducer","ReactDOM","render","es","store","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a5d48fdd.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst GuessedWords = (props) => {\n  let contents;\n  if (props.guessedWords.length === 0) {\n    contents = (\n      <span data-test=\"guess-instructions\">\n        Try to guess the secret word!\n      </span>\n    );\n  } else {\n    const guessedWordsRows = props.guessedWords.map((word, index) => (\n      <tr data-test=\"guessed-word\" key={index}>\n        <td>{word.guessedWord}</td>\n        <td>{word.letterMatchCount}</td>\n      </tr>\n    ))\n    contents = (\n      <div data-test=\"guessed-words\">\n        <h3>Guessed Words</h3>\n        <table className=\"table table-sm\">\n          <thead className=\"thead-light\">\n            <tr>\n              <th>Guess</th>\n              <th>Matching Letters</th>\n            </tr>\n          </thead>\n          <tbody>\n            { guessedWordsRows }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n  return (\n    <div data-test=\"component-guessed-words\">\n     { contents }\n    </div>\n  );\n};\n\nGuessedWords.propTypes = {\n  guessedWords: PropTypes.arrayOf(\n    PropTypes.shape({\n      guessedWord: PropTypes.string.inRequired,\n      letterMatchCount: PropTypes.number.isRequired\n    })\n  ).isRequired,\n};\n\nexport default GuessedWords;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Functional react component for congratulatory message\n * @function\n * @param {object} props - React props.\n * @return {JSX.Element} - Rendered component, or null if the success prop is active.\n */\nconst Congrats = (props) => {\n  if (props.success) {\n    return (\n      <div data-test='component-congrats' className=\"alert alert-success\">\n        <span data-test='congrats-message'>\n          Congratulations! You guessed the word\n        </span>\n      </div>\n    );\n  } else {\n    return (\n      <div data-test=\"component-congrats\" />\n    );\n  }\n}\n\nCongrats.propTypes = {\n  success: PropTypes.bool.isRequired,\n}\n\nexport default Congrats;\n","import axios from 'axios';\n\nimport { getLetterMatchCount } from '../helpers';\n\nexport const actionTypes = {\n  CORRECT_GUESS: 'CORRECT_GUESS',\n  GUESS_WORD: 'GUESS_WORD',\n  SET_SECRET_WORD: 'SET_SECRET_WORD',\n};\n\n/**\n * Returns Redux Thunk fucntion that dispatches GUESS_WORD action and (conditionally) CORRECT_GUESS action\n * @function guessWord\n * @param  {string} guessedWord - Guessed word\n * @return {function} - Redux Thunk function\n */\nexport const guessWord = (guessedWord) => {\n  return function(dispatch, getState) {\n    const secretWord = getState().secretWord;\n    const letterMatchCount = getLetterMatchCount(guessedWord, secretWord);\n\n    dispatch({\n      type: actionTypes.GUESS_WORD,\n      payload: { guessedWord, letterMatchCount }\n    });\n\n    if (guessedWord === secretWord) {\n      dispatch({ type: actionTypes.CORRECT_GUESS });\n    }\n\n  };\n};\n\nexport const getSecretWord = () => {\n  return (dispatch) => {\n    return axios.get('http://localhost:3030')\n      .then(response => {\n        dispatch({\n          type: actionTypes.SET_SECRET_WORD,\n          payload: response.data\n        });\n      });\n  }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { guessWord } from './actions';\n\n//Class based component because connected to redux.\nexport class Input extends Component {\n\n  /**\n   * Create ref for the input box.\n   * @method constructor\n   * @param {object} props - the component props.\n   * @returns {undefined}\n   */\n  constructor(props) {\n    super(props);\n    this.inputBox = React.createRef();\n    this.submitGuessedWord = this.submitGuessedWord.bind(this);\n  }\n\n  submitGuessedWord(event) {\n    // don't submit form\n    event.preventDefault();\n    const guessedWord = this.inputBox.current.value;\n    if (guessedWord && guessedWord.length > 0) {\n      this.props.guessWord(guessedWord);\n    };\n\n    this.inputBox.current.value = '';\n  };\n\n  /**\n   * Render the component.\n   * @method render\n   * @return {JSX.Element}  - the rendered component.\n   */\n  render() {\n    const contents = this.props.success\n      ? null\n      : (\n        <form className=\"form-inline\">\n          <input\n            data-test=\"input-box\"\n            ref={this.inputBox}\n            className=\"mb-2 mx-sm-3\"\n            id=\"word-guess\"\n            type=\"text\"\n            placeholder=\"Enter guess\" />\n          <button\n            data-test=\"submit-button\"\n            className=\"btn btn-primary mb-2\"\n            onClick={this.submitGuessedWord}\n            type=\"submit\">\n            Submit\n          </button>\n        </form>\n      );\n    return (\n      <div data-test=\"component-input\">\n        { contents }\n      </div>\n    )\n  }\n};\n\nconst mapStateToProps = ({ success }) => {\n  return { success };\n}\n\nexport default connect(mapStateToProps, { guessWord })(Input);\n","/**\n * @method getLetterMatchCount\n * @param  {string} guessedWord - The guess made by the user\n * @param  {string} secretWord - The randomly generated secret word\n * @return {number} - The number of letters that match\n */\nexport function getLetterMatchCount(guessedWord, secretWord) {\n  const secretLetterSet = new Set(secretWord.split(''));\n  const guessedLetterSet = new Set(guessedWord.split(''));\n  return [...secretLetterSet].filter(letter => guessedLetterSet.has(letter)).length;\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\n\nimport GuessedWords from './GuessedWords';\nimport Congrats from './Congrats';\nimport Input from './Input';\nimport { getSecretWord } from './actions';\n\nexport class App extends Component {\n  /**\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    //get the secret word\n    this.props.getSecretWord();\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Jotto</h1>\n        <Congrats success={this.props.success} />\n        <Input />\n        <GuessedWords guessedWords={this.props.guessedWords} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const { success, guessedWords, secretWord } = state;\n  return { success, guessedWords, secretWord };\n}\n\nexport default connect(mapStateToProps, { getSecretWord }) (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport success from './successReducer';\nimport guessedWords from './guessedWordsReducer';\nimport secretWord from './secretWordReducer';\n\nexport default combineReducers({\n  success,\n  guessedWords,\n  secretWord\n});\n","import { actionTypes } from '../actions';\n\n/**\n * @function successReducer\n * @param  {array} state - Array of guessed words\n * @param  {object} action - action to be reduced\n * @return {boolean} - new success state\n */\nexport default (state=false, action) => {\n  switch(action.type) {\n    case (actionTypes.CORRECT_GUESS):\n      return true;\n    default:\n      return state;\n  }\n}\n","import { actionTypes } from '../actions';\n\n/**\n * @function guessedWordsReducer\n * @param  {array} state - Array of guessed words.\n * @param  {object} action - Action to be reduced.\n * @returns {array} - new guessedWords state.\n */\nexport default (state=[], action) => {\n  switch(action.type) {\n    case actionTypes.GUESS_WORD:\n      return [...state, action.payload];\n    default:\n      return state;\n  }\n}\n","import { actionTypes } from '../actions';\n\n/**\n * @function secretWordReducer\n * @param  {string} state - State before reducer.\n * @param  {object} action - Action to send to reducer.\n * @return {string} - New state (secret word payload from action).\n */\nexport default (state=null, action) => {\n  switch (action.type) {\n    case actionTypes.SET_SECRET_WORD:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\n\nimport rootReducer from './reducers';\n\nexport const middlewares= [ReduxThunk];\nconst createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore);\n\nexport default createStoreWithMiddleware(rootReducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './configureStore';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}